#!/usr/bin/env bash

PROJECTPATH=$(pwd)
USER="$(id -u):$(id -g)"
SCRIPTNAME=$0

COMPOSE_PROJECT_NAME=${PROJECT_NAME}

ENV_FILE="$PROJECTPATH/vendor/prooxxy/gleipnir/components/.env.gleipnir"
COMPOSE_FILE="$PROJECTPATH/vendor/prooxxy/gleipnir/docker-compose.yml"

if [ ! -f $ENV_FILE ]; then
  echo >&2 "The file that holds the environment variables was not found at $ENV_FILE"
  exit 1
fi

if [ ! -f $COMPOSE_FILE ]; then
  echo >&2 "The docker-compose file was not found at $COMPOSE_FILE"
  exit 1
fi

set -a

source $ENV_FILE

export HOST_IP=$(ip route | grep docker0 | awk '{print $9}')

sleep 1

hash docker 2>/dev/null || { echo >&2 "$SCRIPTNAME requires \"docker\""; exit 1; }

hash docker-compose 2>/dev/null || { echo >&2 "$SCRIPTNAME requires \"docker-compose\""; exit 1; }

function usage() {
  echo -e "Usage:\n\n  $SCRIPTNAME <action> <arguments...> \n"
  echo -e "Actions:\n"
  printf "  %-15s%-30s%-30s\n" "php" "Execute php inside the docker container"
  printf "  %+20s\n" "xdebug <on|off>" 
  echo ""
  printf "  %-15s%-30s%-30s\n" "start" "Start the server and all of its components"
  printf "  %-15s%-30s%-30s\n" "restart" "restart <service>" "Restarts all or specific services"
  printf "  %-15s%-30s%-30s\n" "stop" "Stop the server"
  printf "  %-15s%-30s%-30s\n" "status" "Get the current server status"
  printf "  %-15s%-30s%-30s\n" "importdb" "importdb <file>" "Import database file"
}

function _run_startup_scripts() {

    for component in ./gleipnir/*; do
      if [ -f $component/startup.sh ]; then
        source $component/startup.sh
        sleep 2
      fi
    done
}

function _run_shutdown_scripts() {

    for component in ./gleipnir/*; do
      if [ -f $component/shutdown.sh ]; then
        source $component/shutdown.sh
        sleep 2
      fi
    done
}

function start() {
  _run_startup_scripts
  docker-compose -f $COMPOSE_FILE up -d --build --force-recreate --remove-orphans
}

function stop() {
  if [ $(_isRunning) ]; then
    _run_shutdown_scripts
    docker-compose -f $COMPOSE_FILE down
  fi
}

function remove() {
    docker-compose -f $COMPOSE_FILE rm
}

function _isRunning() {
  dockerStatusOutput=$(docker-compose -f $COMPOSE_FILE ps -q)
  outputSize=${#dockerStatusOutput}
  if [ "$outputSize" -gt 0 ]; then
    echo true
  else
    echo false
  fi
}

function status() {
  if [ ! $(_isRunning) ]; then
    echo >&2 "Not running";
    exit 1;
  fi
  docker-compose -f $COMPOSE_FILE ps -q | xargs docker inspect --format='{{ .Name }} {{ .State.Status }}' | sed 's:^/::g' | xargs printf "%-45s%-30s\n"
}

function restart() {
  if [[ -z "$1" ]]; then
    stop
    start
  else
    docker-compose -f $COMPOSE_FILE restart $1
  fi
}

function importDb()
{
  docker-compose exec -T database mysql -uroot -p${MYSQL_ROOT_PASSWORD} ${MYSQL_DATABASE} < $1
}

function _execPhp() {
  case "$1" in
    xdebug)
      case "$2" in
        "on")
        echo -n "Turning xdebug on ... "
        sed -i '/xdebug.default_enable=0/c\xdebug.default_enable=1' ./gleipnir/php/${PHP_VERSION}/conf/php.ini
        sed -i '/xdebug.remote_autostart=0/c\xdebug.remote_autostart=1' ./gleipnir/php/${PHP_VERSION}/conf/php.ini
        echo "done"
        restart php
        exit 0
        ;;
        "off")
        echo -n "Turning xdebug off ... "
        sed -i '/xdebug.default_enable=1/c\xdebug.default_enable=0' ./gleipnir/php/${PHP_VERSION}/conf/php.ini
        sed -i '/xdebug.remote_autostart=1/c\xdebug.remote_autostart=0' ./gleipnir/php/${PHP_VERSION}/conf/php.ini
        echo "done"
        restart php
        exit 0
        ;;
      esac
      usage
    ;;
    exec)
      if [ ! $(_isRunning) ]; then
        echo >&2 "Docker is not running. Please start the containers first.";
        exit 1;
      fi
      shift 1
      docker-compose exec php php $*
    ;;
  esac
}

case "$1" in
    start)
    start
    ;;

    stop)
    stop
    ;;

    restart)
    shift 1
    restart $*
    ;;

    status)
    status
    ;;

    remove)
    remove
    ;;

    importdb)
    shift 1
    importDb $*
    ;;

    php)
    shift 1
    _execPhp $*
    ;;
    *)
    usage
    ;;
esac

exit 0
