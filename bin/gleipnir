#!/usr/bin/env bash

PROJECTPATH=$(pwd)
USER="$(id -u):$(id -g)"
SCRIPTNAME=$0

GLEIPNIR_PATH="$PROJECTPATH/vendor/prooxxy/gleipnir"
COMPONENTS_PATH="$GLEIPNIR_PATH/components"
BOOT_SCRIPT_PATH="${COMPONENTS_PATH}/*"
CONFIG_PATH="$GLEIPNIR_PATH/config"
DOTGLEIPNIR_PATH="$PROJECTPATH/.gleipnir"
OVERRIDE_CONFIG_PATH="$DOTGLEIPNIR_PATH/config"
ENV_FILE=".env.gleipnir"
COMPOSE_FILE="$OVERRIDE_CONFIG_PATH/docker-compose.yml"
COMPOSE_OVERRIDE_FILE="$OVERRIDE_CONFIG_PATH/docker-compose.override.yml"
DOCKER_COMPOSE_CMD="docker-compose -f $COMPOSE_FILE"
ETC_HOSTS=/etc/hosts
VAR_PATH="$OVERRIDE_CONFIG_PATH/var"
IP="127.0.0.1"

function _docker_compose()
{
  if [ -f $COMPOSE_OVERRIDE_FILE ]; then
    docker-compose -f $COMPOSE_FILE -f $COMPOSE_OVERRIDE_FILE "$@"
  else
    docker-compose -f $COMPOSE_FILE "$@"
  fi
}

function _compile_docker_compose_file()
{
  echo >&1 "Compiling..."
  envsubst < $GLEIPNIR_PATH/docker-compose.yml.dist > $COMPOSE_FILE

  if [ -f "$COMPOSE_OVERRIDE_FILE.dist" ]; then
    envsubst < $COMPOSE_OVERRIDE_FILE.dist > $COMPOSE_OVERRIDE_FILE
  fi

  echo >&1 "Done"
}

function _load_config()
{
  source $CONFIG_PATH/$1
  if [ -f $OVERRIDE_CONFIG_PATH/$1 ]; then
    source $OVERRIDE_CONFIG_PATH/$1
  fi
}

if [ ! -f $CONFIG_PATH/$ENV_FILE ]; then
  echo >&2 "The file that holds the environment variables was not found at $ENV_FILE"
  exit 1
fi

if [ ! -f $OVERRIDE_CONFIG_PATH/$ENV_FILE ]; then
  echo >&2 "No override for env variables was found"
fi

set -a

_load_config $ENV_FILE

export GLEIPNIR_PATH
export PROJECTPATH=$PROJECTPATH
export COMPOSE_PROJECT_NAME=${PROJECT_NAME}
export HOST_IP=$(ip route | grep docker0 | awk '{print $9}')

hash docker 2>/dev/null || { echo >&2 "$SCRIPTNAME requires \"docker\""; exit 1; }
hash docker-compose 2>/dev/null || { echo >&2 "$SCRIPTNAME requires \"docker-compose\""; exit 1; }

function usage()
{
  cat << EOF
  Usage:

  $SCRIPTNAME <action>

  If none of the following actions match the provided command, it will be interpreted as a bin/magento <action> invokation

  Actions:

  xdebug   <on|off> Toggle PHP xdebug

  profiler <on|off> Toggle PHP profiler

  shell <service>
          Opens a shell into any of the services

  php test
          Runs phpunit test suite

  98 <command>
          Run n98magerun command

  redis <command>
          Executes a redis-cli command in the redis container

  start
          Start the environment and all of its components

  stop
          Stop the environment

  restart <services>
          Restarts all or specific services

  uninstall
          Removes installation and purges all container volumes

  status
          Get the current server status

  importdb <file>
          Imports target file to mysql

  exportdb <file>
          Export database to target file

EOF
}

function _run_startup_scripts()
{
  _run_script "startup" $1
}

function _run_shutdown_scripts()
{
  _run_script "shutdown" $1
}

function _run_script()
{
    if [ $# -eq 2 ]; then
      if [ -f COMPONENTS_PATH/$2/$1.sh ]; then
        echo "Running $1.sh for $2"
        source $COMPONENTS_PATH/$2/$1.sh
        sleep 1
      fi
    else
      for component in $BOOT_SCRIPT_PATH; do
        if [ -f $component/$1.sh ]; then
          source $component/$1.sh
          sleep 1
        fi
      done
    fi
}

function get_enabled_services()
{
  echo $( IFS=$' '; echo "${SERVICES[*]}" )
}

function start()
{
  _compile_docker_compose_file
  _run_startup_scripts
  _docker_compose up -d --build --force-recreate --remove-orphans $(get_enabled_services)
}

function stop()
{
  if [ $(_is_running) ]; then
    _run_shutdown_scripts
    _docker_compose down
    docker network rm ${PROJECT_NAME}_NETWORK
  fi
}

function uninstall()
{
    stop
    _docker_compose rm
}

function _is_running()
{
  dockerStatusOutput=$(_docker_compose ps -q)
  outputSize=${#dockerStatusOutput}
  if [ "$outputSize" -gt 0 ]; then
    echo true
  else
    echo false
  fi
}

function status()
{
  if [ ! $(_is_running) ]; then
    echo >&2 "Not running";
    exit 1;
  fi
  _docker_compose ps -q | xargs docker inspect --format='{{ .Name }} {{ .State.Status }}' | sed 's:^/::g' | xargs printf "%-45s%-30s\n"
}

function restart()
{
  if [[ -z "$1" ]]; then
    stop
    start
  else
    _run_shutdown_scripts $1
    _run_startup_scripts $1
    _docker_compose restart $1
  fi
}

function importDb()
{
  _load_config .env.mysql
  _docker_compose exec -T database mysql -uroot -p${MYSQL_ROOT_PASSWORD} ${MYSQL_DATABASE} < $1
}

function exportDb()
{
  _load_config .env.mysql
  _docker_compose exec -T database mysqldump -uroot -p${MYSQL_ROOT_PASSWORD} ${MYSQL_DATABASE} > $1
}

function _execN98()
{
  if [ ! -f $PROJECTPATH/n98-magerun2.phar ]; then
    echo >&2 "N98-magerun2 file not found in project root."
    echo >&2 "Please download the executable and place it in project root. Gleipnir does not provide a magerun file"
  fi
  _docker_compose exec php sh -c "./n98-magerun2.phar $*"
}

function _execRedis()
{
  _docker_compose exec redis sh -c "redis-cli $1"
}

function _execPhp()
{
    _docker_compose exec php sh -c "$*"
}

case "$1" in
    help)
      usage
      ;;

    start)
      start
      ;;

    stop)
      stop
      ;;

    restart)
      shift 1
      restart $*
      ;;

    status)
      status
      ;;

    uninstall)
      uninstall
      ;;

    importdb)
      shift 1
      importDb $*
      ;;

    exportdb)
      shift 1
      exportDb $*
      ;;

    xdebug)
      case "$2" in
        "on")
          source $COMPONENTS_PATH/php/enable_xdebug.sh
          restart php
          exit 0
          ;;
        "off")
          source $COMPONENTS_PATH/php/disable_xdebug.sh
          restart php
          exit 0
          ;;
      esac
      usage
      ;;

    profiler)
      case "$2" in
        "on")
          source $COMPONENTS_PATH/php/enable_profiler.sh
          restart php
          exit 0
          ;;
        "off")
          source $COMPONENTS_PATH/php/disable_profiler.sh
          restart php
          exit 0
          ;;
      esac
      usage
      ;;

    98)
      shift 1
      _execN98 $*
    ;;

    php)
      case "$2" in
        "test")
          _execPhp $PHPUNIT_CMD
          exit 0
          ;;
      esac
      usage
      ;;

    redis)
      shift 1
      _execRedis $*
      ;;

    shell)
      shift 1
        _docker_compose exec $1 sh
      ;;

    *)
      if [ ! $(_is_running) ]; then
        echo >&2 "Docker is not running. Please start the containers first.";
        exit 1;
      fi
      _docker_compose exec php bash -c "bin/magento $*"
esac

exit 0
