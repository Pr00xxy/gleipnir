#!/usr/bin/env bash

PROJECTPATH=$(pwd)
USER="$(id -u):$(id -g)"
SCRIPTNAME=$0

GLEIPNIR_PATH="$PROJECTPATH/vendor/prooxxy/gleipnir"
COMPONENTS_PATH="$GLEIPNIR_PATH/components"
BOOT_SCRIPT_PATH="${COMPONENTS_PATH}/*"
ENV_FILE="$COMPONENTS_PATH/.env.gleipnir"
COMPOSE_FILE="$GLEIPNIR_PATH/docker-compose.yml"
DOCKER_COMPOSE_CMD="docker-compose -f $COMPOSE_FILE"
ETC_HOSTS=/etc/hosts
IP="127.0.0.1"

function _compile_docker_compose_file() {
  echo >&1 "Compiling..."
  envsubst < $GLEIPNIR_PATH/docker-compose.yml.dist > $COMPOSE_FILE
  echo >&1 "Done"
}

if [ ! -f $ENV_FILE ]; then
  echo >&2 "The file that holds the environment variables was not found at $ENV_FILE"
  exit 1
fi

set -a

source $ENV_FILE

export PROJECTPATH=$PROJECTPATH
export COMPOSE_PROJECT_NAME=${PROJECT_NAME}
export HOST_IP=$(ip route | grep docker0 | awk '{print $9}')

sleep 1

hash docker 2>/dev/null || { echo >&2 "$SCRIPTNAME requires \"docker\""; exit 1; }

hash docker-compose 2>/dev/null || { echo >&2 "$SCRIPTNAME requires \"docker-compose\""; exit 1; }

function usage() {
  echo -e "Usage:\n\n  $SCRIPTNAME <action> <arguments...> \n"
  echo -e "Actions:\n"
  printf "  %-15s%-30s%-30s\n" "php" "Execute php inside the docker container"
  printf "  %+20s\n" "xdebug <on|off>"
  echo ""
  printf "  %-15s%-30s%-30s\n" "start" "Start the server and all of its components"
  printf "  %-15s%-30s%-30s\n" "restart" "restart <service>" "Restarts all or specific services"
  printf "  %-15s%-30s%-30s\n" "stop" "Stop the server"
  printf "  %-15s%-30s%-30s\n" "status" "Get the current server status"
  printf "  %-15s%-30s%-30s\n" "importdb" "importdb <file>" "Import database file"
}

function _run_startup_scripts() {
  _run_script "startup" $1
}

function _run_shutdown_scripts() {
  _run_script "shutdown" $1
}

function _run_script() {
    if [ $# -eq 2 ]; then
      if [ -f COMPONENTS_PATH/$2/$1.sh ]; then
        echo "Running $1.sh for $2"
        source $COMPONENTS_PATH/$2/$1.sh
        sleep 1
      fi
    else
      for component in $BOOT_SCRIPT_PATH; do
        if [ -f $component/$1.sh ]; then
          source $component/$1.sh
          sleep 1
        fi
      done
    fi
}

function start() {
  _compile_docker_compose_file
  _run_startup_scripts
  $DOCKER_COMPOSE_CMD up -d --build --force-recreate --remove-orphans
}

function stop() {
  if [ $(_isRunning) ]; then
    _run_shutdown_scripts
    $DOCKER_COMPOSE_CMD down
  fi
}

function remove() {
    $DOCKER_COMPOSE_CMD rm
}

function _isRunning() {
  dockerStatusOutput=$($DOCKER_COMPOSE_CMD ps -q)
  outputSize=${#dockerStatusOutput}
  if [ "$outputSize" -gt 0 ]; then
    echo true
  else
    echo false
  fi
}

function status() {
  if [ ! $(_isRunning) ]; then
    echo >&2 "Not running";
    exit 1;
  fi
  $DOCKER_COMPOSE_CMD ps -q | xargs docker inspect --format='{{ .Name }} {{ .State.Status }}' | sed 's:^/::g' | xargs printf "%-45s%-30s\n"
}

function restart() {
  if [[ -z "$1" ]]; then
    stop
    start
  else
    _run_shutdown_scripts $1
    _run_startup_scripts $1
    $DOCKER_COMPOSE_CMD restart $1
  fi
}

function importDb()
{
  source $COMPONENTS_PATH/.env.mysql
  $DOCKER_COMPOSE_CMD exec -T database mysql -uroot -p${MYSQL_ROOT_PASSWORD} ${MYSQL_DATABASE} < $1
}

function _execRedis() {
  $DOCKER_COMPOSE_CMD exec redis bash -c "redis-cli $1"
}

function _execPhp() {
  case "$1" in
    xdebug)
      case "$2" in
        "on")
          source $COMPONENTS_PATH/php/enable_xdebug.sh
          restart php
          exit 0
          ;;
        "off")
          source $COMPONENTS_PATH/php/disable_xdebug.sh
          restart php
          exit 0
          ;;

      esac
      usage
      ;;
  esac
}

case "$1" in
    start)
      start
      ;;

    stop)
      stop
      ;;

    restart)
      shift 1
      restart $*
      ;;

    status)
      status
      ;;

    remove)
      remove
      ;;

    importdb)
      shift 1
      importDb $*
      ;;

    php)
      shift 1
      _execPhp $*
      ;;

    redis)
      shift 1
      _execRedis $*
      ;; 
    *)
      if [ ! $(_isRunning) ]; then
        echo >&2 "Docker is not running. Please start the containers first.";
        exit 1;
      fi
      $DOCKER_COMPOSE_CMD exec php bash -c "bin/magento $*"
esac

exit 0
